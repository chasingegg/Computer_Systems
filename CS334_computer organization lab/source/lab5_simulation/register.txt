`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:04:43 03/23/2016 
// Design Name: 
// Module Name:    Top 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module timekiller(clockIn, clockOut);
	input clockIn;
	output clockOut;
	reg clockOut;
	
	reg [23:0] buffer;
	
	always @(posedge clockIn)
	begin
		buffer <= buffer + 1;
		clockOut <= &buffer;
	end
endmodule




module Top(inclk, reset,led, switch);
	input inclk;
	input reset;
	input [1:0] switch;
	output wire[7:0] led;

	wire clk;
	
	reg [31:0] PC;
	reg [31:0] INST;
	reg [7:0] IM[0:43];

initial 
begin
	//Instmemory[0] = 32'b10001100000000010000000000000010;
	//Instmemory[1] = 32'b00000000001000010000100000100000;
	//Instmemory[2] = 32'b00000000001000010000100000100000;
	//Instmemory[3] = 32'b10001100000000010000000000010000;
	
	//Instmemory[4] = 32'b10001100000000010000000000100000;
	
   IM[0] = 8'b10001100;
	IM[1] = 8'b00000001;
	IM[2] = 8'b00000000;
	IM[3] = 8'b00000001;  //1  = 1
	
	IM[4] = 8'b10001100;
	IM[5] = 8'b00000010;
	IM[6] = 8'b00000000;
	IM[7] = 8'b00000100;  //2  = 4;
	
	IM[8] = 8'b10001100;
	IM[9] = 8'b00000011;
	IM[10] = 8'b00000000;
	IM[11] = 8'b00001100;  //3   = 12
	
	IM[12] = 8'b10001100;
	IM[13] = 8'b00000011;
	IM[14] = 8'b00000000;
	IM[15] = 8'b00000100;  // 3 = 1& 2    3 = 4
	
	IM[16] = 8'b00000000;
	IM[17] = 8'b00100011;
	IM[18] = 8'b00010000;
	IM[19] = 8'b00100101;  //2  = 1 | 3    2  = 5
	
	IM[20] = 8'b00000000;
	IM[21] = 8'b00100010;
	IM[22] = 8'b00011000;
	IM[23] = 8'b00101010; // 3 = 1 slt 2   3 =  1
	
	IM[24] = 8'b00000000;
	IM[25] = 8'b00100001;
	IM[26] = 8'b00001000;
	IM[27] = 8'b00100000;  // 1 = 1 + 1     1 = 2
	
	IM[28] = 8'b00000000;
	IM[29] = 8'b01000001;
	IM[30] = 8'b00011000;
	IM[31] = 8'b00100010; // 3 = 2  - 1    3 =   3
	
	IM[32] = 8'b00010000;
	IM[33] = 8'b00100001;
	IM[34] = 8'b00000000;
	IM[35] = 8'b00000001;
	
	IM[36] = 8'b10001100;
	IM[37] = 8'b00000001;
	IM[38] = 8'b00000000;
	IM[39] = 8'b00001100;// 1 =12
	
	IM[40] = 8'b10001100;
	IM[41] = 8'b00000001;
	IM[42] = 8'b00000000;
	IM[43] = 8'b00001111;  // 1 = 15
   PC = 0;
end


	
always @(PC)
   INST = {IM[PC],IM[PC+1],IM[PC+2],IM[PC+3]};
	
	wire REG_DST,
	      JUMP,
			BRANCH,
			MEM_READ,
			MEM_TO_REG;
	 wire [1:0] ALUOP;
	 wire MEM_WRITE,
         ALUSRC,
         REG_WRITE;

	wire [4:0] WRITEREG;
   wire [31:0]	WRITEDATA;
   wire [31:0] READDATA1;
   wire [31:0] READDATA2;

	wire [31:0]	DATA;

	wire [3:0] ALUCTR;

	wire [31:0] INPUT2;
	wire ZERO;
	wire [31:0] ALURES;

	wire[31:0] READDATA;
	
	wire [31:0] nextPC;

   wire [31:0] pcPlus4;
   assign pcPlus4 = PC + 4;

   wire [31:0] instshift;
   assign instshift = INST[25:0] << 2;
	
	wire [31:0] JumpAddr;
	assign JumpAddr = {pcPlus4[31:28],instshift[27:0]};
	
	wire [31:0] addshift;
	assign addshift = DATA << 2;
	
	wire [31:0] ADDRES;
	assign ADDRES = pcPlus4 + addshift;
	
	wire AND;
	assign AND = BRANCH & ZERO;
	
	wire [31:0] MUXOUT;
	assign MUXOUT = AND?ADDRES:pcPlus4;
	
	
   assign nextPC = JUMP?JumpAddr:MUXOUT;
	assign WRITEREG = REG_DST?INST[15:11]:INST[20:16];
	assign INPUT2 = ALUSRC?DATA:READDATA2;
	assign WRITEDATA = MEM_TO_REG?READDATA:ALURES;
  
  always @(posedge clk)
   if (reset) 
		PC = 0;
	else 
		PC = nextPC;
		
   timekiller timer(
						.clockIn(inclk),
						.clockOut(clk)
						);
						
	Ctr mainCtr(
				.opCode(INST[31:26]),
	         .regDst(REG_DST),
				.aluSrc(ALUSRC),
				.memToReg(MEM_TO_REG),
				.regWrite(REG_WRITE),
				.memRead(MEM_READ),
				.memWrite(MEM_WRITE),
				.branch(BRANCH),
				.aluOp(ALUOP),
				.jump(JUMP)
				);	
				
   register mainregister(
							.clock_in(clk),
							.readReg1(INST[25:21]),
							.readReg2(INST[20:16]),
							.writeReg(WRITEREG),
							.writeData(WRITEDATA),
							.regWrite(REG_WRITE),
							.readData1(READDATA1),
							.readData2(READDATA2),
							.rst(reset),
							.switch(switch),
							.PC(PC),
							.led(led)
							);
   
	aluCtr mainAluCtr(
						.aluOp(ALUOP),
                  .funct(INST[5:0]),
			         .aluCtr(ALUCTR)
						);

	alu mainAlu(
				.input1(READDATA1),
            .input2(INPUT2),
				.aluCtr(ALUCTR),
				.zero(ZERO),
				.aluRes(ALURES)
				);	
				
	data_memory mainmemory(
							.clock_in(clk),
	                  .address(ALURES),
							.writeData(READDATA2),
							.memWrite(MEM_WRITE),
							.memRead(MEM_READ),
							.readData(READDATA));

	signext mainsignext(
							.inst(INST[15:0]),
	                  .data(DATA));

  
endmodule

	
